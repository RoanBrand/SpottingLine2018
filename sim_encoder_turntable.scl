FUNCTION_BLOCK "sim_encoder_turntable"
{ S7_Optimized_Access := 'FALSE' }
VERSION : 0.1
   VAR_INPUT 
      turnCW : Bool;
      turnACW : Bool;
      encoderStartValue : DInt := 100000;
   END_VAR

   VAR_OUTPUT 
      encoderValue : DInt;
   END_VAR

   VAR 
      startupDone : Bool;
      state : Int;
      lastState : Int;
      ev : DInt;
      ttimer {OriginalPartName := 'TON'; LibVersion := '1.0'} : TON;
      lastVal : DInt;
   END_VAR

   VAR_TEMP 
      elapsed_ms : DInt;
   END_VAR

   VAR CONSTANT 
      counts_per_sec : Int := 256;
   END_VAR


BEGIN
	// startup
	IF NOT #startupDone THEN
	    #ev := #encoderStartValue;
	    #startupDone := true;
	END_IF;
	
	CASE #state OF
	    0:
	        IF #turnCW AND NOT #turnACW THEN
	            #state := 1;
	        ELSIF #turnACW AND NOT #turnCW THEN
	            #state := 2;
	        END_IF;
	        ;
	    1:
	        IF #state <> #lastState THEN
	            #lastVal := #ev;
	            #lastState := #state;
	        END_IF;
	        
	        #ttimer(IN := true,
	                PT := t#1h);
	        #elapsed_ms := TIME_TO_DINT(#ttimer.ET);
	        #ev := #lastVal + ((#elapsed_ms * #counts_per_sec) / 1000);
	        IF NOT #turnCW OR #turnACW THEN
	            #ttimer(IN := false,
	                    PT := t#1h);
	            #state := 0;
	        END_IF;
	        ;
	    2:
	        IF #state <> #lastState THEN
	            #lastVal := #ev;
	            #lastState := #state;
	        END_IF;
	        
	        #ttimer(IN := true,
	                PT := t#1h);
	        #elapsed_ms := TIME_TO_DINT(#ttimer.ET);
	        #ev := #lastVal - ((#elapsed_ms * #counts_per_sec) / 1000);
	        IF NOT #turnACW OR #turnCW THEN
	            #ttimer(IN := false,
	                    PT := t#1h);
	            #state := 0;
	        END_IF;
	        ;
	END_CASE;
	#encoderValue := #ev;
	
END_FUNCTION_BLOCK

